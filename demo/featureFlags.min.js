/*! PageUp's Angular Feature Flags v1.6.6 © 2021 Michael Taranto */
/*!
 * PageUp's Angular Feature Flags v1.6.6
 *
 * © 2021, Michael Taranto
 */

(function () {
  var app = angular.module("feature-flags", []);

  app.controller("MainCtrl", [
    "$scope",
    "flagServerValues",
    function ($scope, flagServerValues) {
      if (false) debugger;
      console.log("In MainCtrl");
      $scope.name = flagServerValues[0].name;
    },
  ]);

  angular.module("feature-flags").directive("featureFlag", [
    "featureFlags",
    "$interpolate",
    function (featureFlags, $interpolate) {
      return {
        transclude: "element",
        priority: 599,
        terminal: true,
        restrict: "A",
        $$tlb: true,
        compile: function featureFlagCompile(tElement, tAttrs) {
          var hasHideAttribute = "featureFlagHide" in tAttrs;

          tElement[0].textContent =
            " featureFlag: " +
            tAttrs.featureFlag +
            " is " +
            (hasHideAttribute ? "on" : "off") +
            " ";

          return function featureFlagPostLink(
            $scope,
            element,
            attrs,
            ctrl,
            $transclude
          ) {
            var featureEl, childScope;
            $scope.$watch(
              function featureFlagWatcher() {
                var featureFlag = $interpolate(attrs.featureFlag)($scope);
                return featureFlags.isOn(featureFlag);
              },
              function featureFlagChanged(isEnabled) {
                var showElement = hasHideAttribute ? !isEnabled : isEnabled;

                if (showElement) {
                  childScope = $scope.$new();
                  $transclude(childScope, function (clone) {
                    featureEl = clone;
                    element.after(featureEl).remove();
                  });
                } else {
                  if (childScope) {
                    childScope.$destroy();
                    childScope = null;
                  }
                  if (featureEl) {
                    featureEl.after(element).remove();
                    featureEl = null;
                  }
                }
              }
            );
          };
        },
      };
    },
  ]);

  angular.module("feature-flags").directive("featureFlagOverrides", [
    "featureFlags",
    function (featureFlags) {
      return {
        restrict: "A",
        link: function postLink($scope) {
          $scope.flags = featureFlags.get();

          $scope.isOn = featureFlags.isOn;
          $scope.isOverridden = featureFlags.isOverridden;
          $scope.enable = featureFlags.enable;
          $scope.disable = featureFlags.disable;
          $scope.reset = featureFlags.reset;
          $scope.isOnByDefault = featureFlags.isOnByDefault;
        },
        template:
          '<div class="feature-flags">' +
          '  <h2 class="feature-flags-heading">Feature Flags</h2>' +
          '  <div id="feature-flag--{{flag.name}}" class="feature-flags-flag" ng-repeat="flag in flags">' +
          '    <div class="feature-flags-name">{{flag.name || flag.name}}</div>' +
          '      <div id="feature-flag--{{flag.name}}--enable" class="feature-flags-switch" ng-click="enable(flag.name)" ng-class="{\'active\': isOverridden(flag.name) && isOn(flag.name)}">ON</div>' +
          '      <div id="feature-flag--{{flag.name}}--disable" class="feature-flags-switch" ng-click="disable(flag.name)" ng-class="{\'active\': isOverridden(flag.name) && !isOn(flag.name)}">OFF</div>' +
          '      <div id="feature-flag--{{flag.name}}--reset" class="feature-flags-switch" ng-click="reset(flag.name)" ng-class="{\'active\': !isOverridden(flag.name)}">DEFAULT ({{isOnByDefault(flag.name) ? \'ON\' : \'OFF\'}})</div>' +
          '    <div class="feature-flags-desc">{{flag.description}}</div>' +
          "  </div>" +
          "</div>",
        replace: true,
      };
    },
  ]);

  angular.module("feature-flags").service("featureFlagOverrides", [
    "$rootElement",
    function ($rootElement) {
      var appName = $rootElement.attr("ng-app"),
        environment = "",
        keyPrefix = "featureFlags." + appName + ".",
        localStorageAvailable = (function () {
          try {
            localStorage.setItem("featureFlags.availableTest", "test");
            localStorage.removeItem("featureFlags.availableTest");
            return true;
          } catch (e) {
            return false;
          }
        })(),
        prefixedKeyFor = function (flagName) {
          return keyPrefix + flagName;
        },
        isPrefixedKey = function (name) {
          return name.indexOf(keyPrefix) === 0;
        },
        getPrefix = function () {
          return (
            "featureFlags." + appName + "." + (environment && environment + ".")
          );
        },
        setEnvironment = function (value) {
          environment = value;
          keyPrefix = getPrefix();
        },
        setAppName = function ($appName) {
          appName = $appName;
          keyPrefix = getPrefix();
        },
        set = function (value, flagName) {
          if (localStorageAvailable) {
            localStorage.setItem(prefixedKeyFor(flagName), value);
          }
        },
        get = function (flagName) {
          if (localStorageAvailable) {
            return localStorage.getItem(prefixedKeyFor(flagName));
          }
          return null;
        },
        remove = function (flagName) {
          if (localStorageAvailable) {
            localStorage.removeItem(prefixedKeyFor(flagName));
          }
        };

      return {
        isPresent: function (name) {
          var value = get(name);
          return typeof value !== "undefined" && value !== null;
        },
        setEnvironment: setEnvironment,
        setAppName: setAppName,
        get: get,
        set: function (flag, value) {
          if (angular.isObject(flag)) {
            angular.forEach(flag, set);
          } else {
            set(value, flag);
          }
        },
        remove: remove,
        reset: function () {
          var name;
          if (localStorageAvailable) {
            for (name in localStorage) {
              if (isPrefixedKey(name)) {
                localStorage.removeItem(name);
              }
            }
          }
        },
      };
    },
  ]);

  function FeatureFlags($q, featureFlagOverrides, initialFlags, envParam) {
    var serverFlagCache = {},
      flags = [],
      environment = "prod"; //todo: forcing prod envParam,
    (instance = 0),
      (getCachedFlag = function (name) {
        if (false) debugger;
        var isCached =
          serverFlagCache[environment] && serverFlagCache[environment][name];
        console.log(
          "getCachedFlag(" +
            name +
            ") = " +
            isCached +
            "   Environment = " +
            environment
        );
        return isCached;
      }),
      (resolve = function (val) {
        console.log("in resolve");
        var deferred = $q.defer();
        deferred.resolve(val);
        console.log("resolving deferred");
        return deferred.promise;
      }),
      (isOverridden = function (name) {
        var isOver = featureFlagOverrides.isPresent(name);
        console.log("isOverriden(" + name + ") = " + isOver);
        return isOver;
      }),
      (isOn = function (name) {
        if (false) debugger;
        var isOnTmp = isOverridden(name)
          ? featureFlagOverrides.get(name) === "true"
          : getCachedFlag(name);
        console.log("isOn(" + name + ") = " + isOnTmp);
        return isOnTmp;
      }),
      (isOnByDefault = function (name) {
        isDef = getCachedFlag(name);
        console.log("isOnByDefault(" + name + ") = " + isDef);
        return isDef;
      }),
      (isEnabledForInstance = function (instances) {
        if (!instances) {
          console.log(
            "isEnabledForInstance(" +
              instances +
              ") = " +
              true +
              " (instances is falsey)"
          );
          return true;
        }
        var isFound = instances.indexOf(instance) !== -1;
        console.log(
          "isEnabledForInstance(" +
            instances +
            ") = " +
            isFound +
            " (instances is truthy)"
        );
        return isFound;
      }),
      (isExpired = function (expiryDate) {
        var now = new Date().toISOString();
        if (!expiryDate) {
          console.log(
            "isExpired(" + expiryDate + ") = false (expiryDate is falsey)"
          );
          return false;
        }
        var isExp = now > expiryDate;
        console.isOnlog("isExpired(" + expiryDate + ") = " + isExp);
        return isExp;
      }),
      (isDefaultEnabled = function (environmentEnabled, flag) {
        var isEnabled =
          environmentEnabled &&
          isEnabledForInstance(flag.instances) &&
          !isExpired(flag.expires);

        console.log(
          "isEnabled(" + environmentEnabled + "," + flag + ") = " + isEnabled
        );
        return isEnabled;
      }),
      (updateFlagsAndGetAll = function (newFlags) {
        console.log("updateFlagsAndGetAll");
        if (false) debugger;
        angular.copy(newFlags, flags);
        flags.forEach(function (flag) {
          flag.environments = { prod: true };

          if (false) debugger;
          angular.forEach(
            flag.environments,
            function (environmentEnabled, env) {
              if (false) debugger;
              if (!serverFlagCache[env]) {
                serverFlagCache[env] = {};
              }
              serverFlagCache[env][flag.name] = isDefaultEnabled(
                environmentEnabled,
                flag
              );
              flag.environments[env] = isOn(flag.name);
            }
          );
        });
        return flags;
      }),
      (updateFlagsWithPromise = function (promise) {
        console.log("updateFlagsWithPromise");
        return promise.then(function (value) {
          return updateFlagsAndGetAll(value.data || value);
        });
      }),
      (get = function () {
        console.log("get: " + flags);
        return flags;
      }),
      (set = function (newFlags) {
        if (false) debugger;

        var isArray = angular.isArray(newFlags);
        console.log(
          "SET flags. isArray: " + isArray + "   values: " + newFlags
        );

        return angular.isArray(newFlags)
          ? resolve(updateFlagsAndGetAll(newFlags))
          : updateFlagsWithPromise(newFlags);
      }),
      (setEnvironment = function (value) {
        console.log("setEnvironment(" + value + ")");
        environment = value;
        featureFlagOverrides.setEnvironment(value);
      }),
      (setAppName = function (value) {
        console.log("setAppName(" + value + ")");
        featureFlagOverrides.setAppName(value);
      }),
      (setInstance = function (value) {
        console.log("setInstance(" + value + ")");
        instance = value;
      }),
      (enable = function (flag) {
        console.log("enable(" + flag + ")");
        featureFlagOverrides.set(flag, true);
      }),
      (disable = function (flag) {
        console.log("disable(" + flag + ")");
        featureFlagOverrides.set(flag, false);
      }),
      (reset = function (flag) {
        console.log("reset(" + flag + ")");
        featureFlagOverrides.remove(flag);
      }),
      //rrc - changed to allow inital load from constant
      (init = function () {
        console.log("init()");
        if (false) debugger;
        if (initialFlags) {
          set(initialFlags);
        }
      });

    init();

    return {
      set: set,
      get: get,
      enable: enable,
      disable: disable,
      reset: reset,
      isOn: isOn,
      isOnByDefault: isOnByDefault,
      isOverridden: isOverridden,
      setEnvironment: setEnvironment,
      setAppName: setAppName,
      setInstance: setInstance,
    };
  }

  angular
    .module("feature-flags") //todo: the code below is called first after the bootstrap
    //the module gets loaded, then the debugger does a lot of hidden steps then this.$get is called.
    .provider("featureFlags", function () {
      if (false) debugger;
      var initialFlags = [];
      var environment = "prod";
      var appName = "";

      this.setInitialFlags = function (flags) {
        initialFlags = flags;
      };

      this.setEnvironment = function (env) {
        environment = env;
      };

      this.setAppName = function ($appName) {
        appName = $appName;
      };

      //note: flagServerValues are being injected here
      this.$get = [
        "$q",
        "featureFlagOverrides",
        "flagServerValues",
        function ($q, featureFlagOverrides, flagServerValues) {
          //todo: are values being injected here?
          if (false) debugger;
          var initValues = flagServerValues || featureFlagOverrides;
          var service = new FeatureFlags(
            $q,
            featureFlagOverrides,
            initValues,
            environment
          );
          if (environment) {
            service.setEnvironment(environment);
          }
          if (appName) {
            service.setAppName(appName);
          }
          return service;
        },
      ];
    });
})();
